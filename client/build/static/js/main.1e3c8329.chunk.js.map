{"version":3,"sources":["components/navbar/Logo.js","cache/mutations.js","components/navbar/NavbarOptions.js","components/main/TableHeader.js","components/main/TableEntry.js","components/main/TableContents.js","components/main/MainContents.js","components/sidebar/SidebarHeader.js","components/sidebar/SidebarEntry.js","components/sidebar/SidebarList.js","components/sidebar/SidebarContents.js","components/modals/Login.js","components/modals/Delete.js","components/modals/CreateAccount.js","cache/queries.js","utils/jsTPS.js","components/homescreen/Homescreen.js","App.js","index.js"],"names":["Logo","props","className","LOGIN","gql","REGISTER","LOGOUT","ADD_ITEM","DELETE_ITEM","UPDATE_ITEM_FIELD","REORDER_ITEMS","ADD_TODOLIST","DELETE_TODOLIST","UPDATE_TODOLIST_FIELD","LoggedIn","client","useApolloClient","useMutation","Logout","handleLogout","e","a","fetchUser","data","resetStore","setActiveList","hoverAnimation","onClick","wType","LoggedOut","setShowLogin","setShowCreate","NavbarOptions","auth","logout","TableHeader","buttonStyle","disabled","clickDisabled","size","addItem","setShowDelete","TableEntry","completeStyle","completed","description","due_date","status","useState","editingDate","toggleDateEdit","editingDescr","toggleDescrEdit","editingStatus","toggleStatusEdit","onBlur","newDescr","target","value","prevDescr","editItem","_id","autoFocus","defaultValue","type","barAnimation","inputClass","newDate","prevDate","newStatus","prevStatus","reorderItem","deleteItem","index","TableContents","entries","activeList","items","map","entry","key","id","MainContents","SidebarHeader","createNewList","clickAnimation","shape","color","undo","redo","SidebarEntry","editing","toggleEditing","name","preEdit","setPreEdit","handleEditing","stopPropagation","entryStyle","activeid","onDoubleClick","handleSetActive","updateListField","SidebarList","todolists","todo","SidebarContents","Login","email","password","input","setInput","loading","toggleLoading","showErr","displayErrorMsg","updateInput","updated","handleLogin","variables","error","login","refetchTodos","onClose","labelAnimation","labelText","inputType","span","Delete","handleDelete","deleteList","CreateAccount","firstName","lastName","Register","handleCreateAccount","field","alert","message","console","log","register","GET_DB_USER","GET_DB_TODOS","jsTPS_Transaction","UpdateListField_Transaction","prev","update","callback","updateFunction","this","ReorderItems_Transaction","listID","itemID","dir","revDir","itemId","direction","EditItem_Transaction","flag","UpdateListItems_Transaction","item","opcode","addfunc","delfunc","addFunction","deleteFunction","jsTPS","transactions","mostRecentTransaction","performingDo","performingUndo","transaction","length","i","splice","push","hasTransactionToRedo","doTransaction","retVal","getSize","getRedoSize","getUndoSize","hasTransactionToUndo","undoTransaction","Homescreen","showDelete","toggleShowDelete","showLogin","toggleShowLogin","showCreate","toggleShowCreate","mutations","ReorderTodoItems","UpdateTodoItemField","UpdateTodolistField","DeleteTodolist","DeleteTodoItem","AddTodolist","AddTodoItem","useQuery","refetch","getAllTodos","user","tempID","list","find","tpsUndo","tps","tpsRedo","lastID","newItem","assigned_to","addTransaction","itemToDelete","Math","floor","random","owner","todolist","refetchQueries","query","addTodolist","wLayout","side","App","transactionStack","queries","getCurrentUser","exact","from","to","pathname","path","render","cache","InMemoryCache","dataIdFromObject","object","__typename","typePolicies","Query","fields","getAllEntries","merge","existing","incoming","ApolloClient","uri","credentials","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e3c8329.chunk.js","sourcesContent":["import React from 'react';\n\nconst Logo = (props) => {\n    return (\n        <div className='logo'>\n            Todo Tracker\n        </div>\n    );\n};\n\nexport default Logo;","import { gql } from \"@apollo/client\";\n\nexport const LOGIN = gql`\n\tmutation Login($email: String!, $password: String!) {\n\t\tlogin(email: $email, password: $password) {\n\t\t\temail \n\t\t\t_id\n\t\t\tfirstName\n\t\t\tlastName\n\t\t\tpassword\n\t\t\tinitials\n\t\t}\n\t}\n`;\n\nexport const REGISTER = gql`\n\tmutation Register($email: String!, $password: String!, $firstName: String!, $lastName: String!) {\n\t\tregister(email: $email, password: $password, firstName: $firstName, lastName: $lastName) {\n\t\t\temail\n\t\t\tpassword\n\t\t\tfirstName\n\t\t\tlastName\n\t\t}\n\t}\n`;\nexport const LOGOUT = gql`\n\tmutation Logout {\n\t\tlogout \n\t}\n`;\n\nexport const ADD_ITEM = gql`\n\tmutation AddItem($item: ItemInput!, $_id: String!, $index: Int!) {\n\t  \taddItem(item: $item, _id: $_id, index: $index)\n\t}\n`;\n\nexport const DELETE_ITEM = gql`\n\tmutation DeleteItem($itemId: String!, $_id: String!) {\n\t\tdeleteItem(itemId: $itemId, _id: $_id) {\n\t\t\t_id\n\t\t\tid\n\t\t\tdescription\n\t\t\tdue_date\n\t\t\tassigned_to\n\t\t\tcompleted\n\t\t}\n\t}\n`;\n\nexport const UPDATE_ITEM_FIELD = gql`\n\tmutation UpdateItemField($_id: String!, $itemId: String!, $field: String!, $value: String!, $flag: Int!) {\n\t\tupdateItemField(_id: $_id, itemId: $itemId, field: $field, value: $value, flag: $flag) {\n\t\t\t_id\n\t\t\tid\n\t\t\tdescription\n\t\t\tdue_date\n\t\t\tassigned_to\n\t\t\tcompleted\n\t\t}\n\t}\n`;\n\nexport const REORDER_ITEMS = gql`\n\tmutation ReorderItems($_id: String!, $itemId: String!, $direction: Int!) {\n\t\treorderItems(_id: $_id, itemId: $itemId, direction: $direction) {\n\t\t\t_id\n\t\t\tid\n\t\t\tdescription\n\t\t\tdue_date\n\t\t\tassigned_to\n\t\t\tcompleted\n\t\t}\n\t}\n`;\n\nexport const ADD_TODOLIST = gql`\n\tmutation AddTodolist($todolist: TodoInput!) {\n\t\taddTodolist(todolist: $todolist) \n\t}\n`;\n\nexport const DELETE_TODOLIST = gql`\n\tmutation DeleteTodolist($_id: String!) {\n\t\tdeleteTodolist(_id: $_id)\n\t}\n`;\n\nexport const UPDATE_TODOLIST_FIELD = gql`\n\tmutation UpdateTodolistField($_id: String!, $field: String!, $value: String!) {\n\t\tupdateTodolistField(_id: $_id, field: $field, value: $value)\n\t}\n`;\n","import React                                from 'react';\nimport { LOGOUT }                           from '../../cache/mutations';\nimport { useMutation, useApolloClient }     from '@apollo/client';\nimport { WButton, WNavItem }                from 'wt-frontend';\n\nconst LoggedIn = (props) => {\n    const client = useApolloClient();\n\tconst [Logout] = useMutation(LOGOUT);\n\n    const handleLogout = async (e) => {\n        Logout();\n        const { data } = await props.fetchUser();\n        if (data) {\n            let reset = await client.resetStore();\n            if (reset) props.setActiveList({});\n        }\n    };\n\n    return (\n        <WNavItem hoverAnimation=\"lighten\">\n            <WButton className=\"navbar-options\" onClick={handleLogout} wType=\"texted\" hoverAnimation=\"text-primary\">\n                Logout\n            </WButton>\n        </WNavItem >\n    );\n};\n\nconst LoggedOut = (props) => {\n    return (\n        <>\n            <WNavItem hoverAnimation=\"lighten\">\n                <WButton className=\"navbar-options\" onClick={props.setShowLogin} wType=\"texted\" hoverAnimation=\"text-primary\">\n                    Login\n                </WButton>\n            </WNavItem>\n            <WNavItem hoverAnimation=\"lighten\">\n                <WButton className=\"navbar-options\" onClick={props.setShowCreate} wType=\"texted\" hoverAnimation=\"text-primary\"> \n                    Sign Up \n                </WButton>\n            </WNavItem>\n        </>\n    );\n};\n\n\nconst NavbarOptions = (props) => {\n    return (\n        <>\n            {\n                props.auth === false ? <LoggedOut setShowLogin={props.setShowLogin} setShowCreate={props.setShowCreate} />\n                : <LoggedIn fetchUser={props.fetchUser} setActiveList={props.setActiveList} logout={props.logout} />\n            }\n        </>\n\n    );\n};\n\nexport default NavbarOptions;","import React from 'react';\n\nimport { WButton, WRow, WCol } from 'wt-frontend';\n\nconst TableHeader = (props) => {\n\n    const buttonStyle = props.disabled ? ' table-header-button-disabled ' : 'table-header-button ';\n    const clickDisabled = () => { };\n\n    return (\n        <WRow className=\"table-header\">\n            <WCol size=\"4\">\n                <WButton className='table-header-section' wType=\"texted\" >Task</WButton>\n            </WCol>\n\n            <WCol size=\"3\">\n                <WButton className='table-header-section' wType=\"texted\">Due Date</WButton>\n            </WCol>\n\n            <WCol size=\"2\">\n                <WButton className='table-header-section' wType=\"texted\" >Status</WButton>\n            </WCol>\n\n            <WCol size=\"3\">\n                <div className=\"table-header-buttons\">\n                    <WButton onClick={props.disabled ? clickDisabled : props.addItem} wType=\"texted\" className={`${buttonStyle}`}>\n                        <i className=\"material-icons\">add_box</i>\n                    </WButton>\n                    <WButton onClick={props.disabled ? clickDisabled : props.setShowDelete} wType=\"texted\" className={`${buttonStyle}`}>\n                        <i className=\"material-icons\">delete_outline</i>\n                    </WButton>\n                    <WButton onClick={props.disabled ? clickDisabled : () => props.setActiveList({})} wType=\"texted\" className={`${buttonStyle}`}>\n                        <i className=\"material-icons\">close</i>\n                    </WButton>\n                </div>\n            </WCol>\n\n        </WRow>\n    );\n};\n\nexport default TableHeader;","import React, { useState } from 'react';\nimport { WButton, WInput, WRow, WCol } from 'wt-frontend';\n\nconst TableEntry = (props) => {\n    const { data } = props;\n\n    const completeStyle = data.completed ? ' complete-task' : ' incomplete-task';\n\n    const description = data.description;\n    const due_date = data.due_date;\n    const status = data.completed ? 'complete' : 'incomplete';\n    const [editingDate, toggleDateEdit] = useState(false);\n    const [editingDescr, toggleDescrEdit] = useState(false);\n    const [editingStatus, toggleStatusEdit] = useState(false);\n\n    const handleDateEdit = (e) => {\n        toggleDateEdit(false);\n        const newDate = e.target.value ? e.target.value : 'No Date';\n        const prevDate = due_date;\n        props.editItem(data._id, 'due_date', newDate, prevDate);\n    };\n\n    const handleDescrEdit = (e) => {\n        toggleDescrEdit(false);\n        const newDescr = e.target.value ? e.target.value : 'No Description';\n        const prevDescr = description;\n        props.editItem(data._id, 'description', newDescr, prevDescr);\n    };\n\n    const handleStatusEdit = (e) => {\n        toggleStatusEdit(false);\n        const newStatus = e.target.value ? e.target.value : false;\n        const prevStatus = status;\n        props.editItem(data._id, 'completed', newStatus, prevStatus);\n    };\n\n    return (\n        <WRow className='table-entry'>\n            <WCol size=\"4\">\n                {\n                    editingDescr || description === ''\n                        ? <WInput\n                            className='table-input' onBlur={handleDescrEdit}\n                            autoFocus={true} defaultValue={description} type='text'\n                            wType=\"outlined\" barAnimation=\"solid\" inputClass=\"table-input-class\"\n                        />\n                        : <div className=\"table-text\"\n                            onClick={() => toggleDescrEdit(!editingDescr)}\n                        >{description}\n                        </div>\n                }\n            </WCol>\n\n            <WCol size=\"3\">\n                {\n                    editingDate ? <input\n                        className='table-input' onBlur={handleDateEdit}\n                        autoFocus={true} defaultValue={due_date} type='date'\n                        wType=\"outlined\" barAnimation=\"solid\" inputClass=\"table-input-class\"\n                    />\n                        : <div className=\"table-text\"\n                            onClick={() => toggleDateEdit(!editingDate)}\n                        >{due_date}\n                        </div>\n                }\n            </WCol>\n\n            <WCol size=\"2\">\n                {\n                    editingStatus ? <select\n                        className='table-select' onBlur={handleStatusEdit}\n                        autoFocus={true} defaultValue={status}\n                    >\n                        <option value=\"complete\">complete</option>\n                        <option value=\"incomplete\">incomplete</option>\n                    </select>\n                        : <div onClick={() => toggleStatusEdit(!editingStatus)} className={`${completeStyle} table-text`}>\n                            {status}\n                        </div>\n                }\n            </WCol>\n\n            <WCol size=\"3\">\n                <div className='button-group'>\n                    <WButton className=\"table-entry-buttons\" onClick={() => props.reorderItem(data._id, -1)} wType=\"texted\">\n                        <i className=\"material-icons\">expand_less</i>\n                    </WButton>\n                    <WButton className=\"table-entry-buttons\" onClick={() => props.reorderItem(data._id, 1)} wType=\"texted\">\n                        <i className=\"material-icons\">expand_more</i>\n                    </WButton>\n                    <WButton className=\"table-entry-buttons\" onClick={() => props.deleteItem(data, props.index)} wType=\"texted\">\n                        <i className=\"material-icons\">close</i>\n                    </WButton>\n                </div>\n            </WCol>\n        </WRow>\n    );\n};\n\nexport default TableEntry;\n","import React        from 'react';\nimport TableEntry   from './TableEntry';\n\nconst TableContents = (props) => {\n\n    const entries = props.activeList ? props.activeList.items : null;\n    return (\n        entries ? <div className=' table-entries container-primary'>\n            {\n                entries.map((entry, index) => (\n                    <TableEntry\n                        data={entry} key={entry.id}\n                        deleteItem={props.deleteItem} reorderItem={props.reorderItem}\n                        editItem={props.editItem} index={index}\n                    />\n                ))\n            }\n\n            </div>\n            : <div className='container-primary' />\n    );\n};\n\nexport default TableContents;\n","import React            from 'react';\nimport TableHeader      from './TableHeader';\nimport TableContents    from './TableContents';\n\nconst MainContents = (props) => {\n    return (\n        <div className='table ' >\n            <TableHeader\n                disabled={!props.activeList._id} addItem={props.addItem}\n                setShowDelete={props.setShowDelete} setActiveList={props.setActiveList}\n            />\n            <TableContents\n                key={props.activeList.id} activeList={props.activeList}\n                deleteItem={props.deleteItem} reorderItem={props.reorderItem}\n                editItem={props.editItem}\n            />\n        </div>\n    );\n};\n\nexport default MainContents;","import React                    from 'react';\nimport { WButton, WRow, WCol }  from 'wt-frontend';\n\nconst SidebarHeader = (props) => {\n    return (\n        <WRow className='sidebar-header'>\n            <WCol size=\"7\">\n                <WButton wType=\"texted\" hoverAnimation=\"text-primary\" className='sidebar-header-name'>\n                    Todolists\n                </WButton>\n            </WCol>\n\n            <WCol size=\"5\">\n                {\n                    props.auth && <div className=\"sidebar-options\">\n                        <WButton className=\"sidebar-buttons\" onClick={props.createNewList} clickAnimation=\"ripple-light\" shape=\"rounded\" color=\"primary\">\n                            <i className=\"material-icons\">add</i>\n                        </WButton>\n                        <WButton className=\"sidebar-buttons undo-redo\" onClick={props.undo} wType=\"texted\" clickAnimation=\"ripple-light\" shape=\"rounded\">\n                            <i className=\"material-icons\">undo</i>\n                        </WButton>\n                        <WButton className=\"sidebar-buttons undo-redo\" onClick={props.redo} wType=\"texted\" clickAnimation=\"ripple-light\" shape=\"rounded\">\n                            <i className=\"material-icons\">redo</i>\n                        </WButton>\n                    </div>\n                }\n            </WCol>\n\n        </WRow>\n\n    );\n};\n\nexport default SidebarHeader;","import React, { useState }  from 'react';\nimport { WNavItem, WInput } from 'wt-frontend';\n\nconst SidebarEntry = (props) => {\n    const [editing, toggleEditing] = useState(false);\n    const [preEdit, setPreEdit] = useState(props.name);\n\n    const handleEditing = (e) => {\n        e.stopPropagation();\n        setPreEdit(props.name);\n        toggleEditing(!editing);\n    };\n\n    const handleSubmit = (e) => {\n        handleEditing(e);\n        const { name, value } = e.target;\n        props.updateListField(props._id, name, value, preEdit);\n    };\n\n    const entryStyle = props.id === props.activeid ? 'list-item list-item-active' : 'list-item ';\n    \n    return (\n        <WNavItem \n            className={entryStyle} onDoubleClick={handleEditing} \n            onClick={() => { props.handleSetActive(props.id) }} hoverAnimation=\"lighten\"\n        >\n            {\n                editing ? <WInput className=\"list-item-edit\" inputClass=\"list-item-edit-input\" wType=\"lined\" barAnimation=\"solid\" name='name' onBlur={handleSubmit} autoFocus={true} defaultValue={props.name} />\n                    :   <div className='list-text'>\n                            {props.name}\n                        </div>\n            }\n        </WNavItem>\n    );\n};\n\nexport default SidebarEntry;","import React        from 'react';\nimport SidebarEntry from './SidebarEntry';\n\nconst SidebarList = (props) => {\n    return (\n        <>\n            {\n                props.todolists &&\n                props.todolists.map(todo => (\n                    <SidebarEntry\n                        handleSetActive={props.handleSetActive} activeid={props.activeid}\n                        id={todo.id} key={todo.id} name={todo.name} _id={todo._id}\n                        updateListField={props.updateListField}\n                    />\n                ))\n            }\n        </>\n    );\n};\n\nexport default SidebarList;","import React            from 'react';\nimport SidebarHeader    from './SidebarHeader';\nimport SidebarList      from './SidebarList';\n\nconst SidebarContents = (props) => {\n    return (\n        <>\n            <SidebarHeader \n                auth={props.auth} createNewList={props.createNewList} \n                undo={props.undo} redo={props.redo} \n            />\n            <SidebarList\n                activeid={props.activeid} handleSetActive={props.handleSetActive}\n                todolists={props.todolists} createNewList={props.createNewList}\n                updateListField={props.updateListField}\n            />\n        </>\n    );\n};\n\nexport default SidebarContents;","import React, { useState } \tfrom 'react';\nimport { LOGIN } \t\t\tfrom '../../cache/mutations';\nimport { useMutation }    \tfrom '@apollo/client';\n\nimport { WModal, WMHeader, WMMain, WMFooter, WButton, WInput } from 'wt-frontend';\n\nconst Login = (props) => {\n\tconst [input, setInput] = useState({ email: '', password: '' });\n\tconst [loading, toggleLoading] = useState(false);\n\tconst [showErr, displayErrorMsg] = useState(false);\n\tconst errorMsg = \"Email/Password not found.\";\n\tconst [Login] = useMutation(LOGIN);\n\n\tconst updateInput = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tconst updated = { ...input, [name]: value };\n\t\tsetInput(updated);\n\t}\n\n\tconst handleLogin = async (e) => {\n\n\t\tconst { loading, error, data } = await Login({ variables: { ...input } });\n\t\tif (loading) { toggleLoading(true) };\n\t\tif (data.login._id === null) {\n\t\t\tdisplayErrorMsg(true);\n\t\t\treturn;\n\t\t}\n\t\tif (data) {\n\t\t\tprops.fetchUser();\n\t\t\tprops.refetchTodos();\n\t\t\ttoggleLoading(false)\n\t\t\tprops.setShowLogin(false)\n\t\t};\n\t};\n\n\n\treturn (\n        // Replace div with WModal\n\n\t\t<div className=\"login-modal\">\n\t\t\t<div className=\"modal-header\" onClose={() => props.setShowLogin(false)}>\n\t\t\t\tLogin\n\t\t\t</div>\n\n\t\t\t{\n\t\t\t\tloading ? <div />\n\t\t\t\t\t: <div className=\"main-login-modal\">\n\n\t\t\t\t\t\t<WInput className=\"modal-input\" onBlur={updateInput} name='email' labelAnimation=\"up\" barAnimation=\"solid\" labelText=\"Email Address\" wType=\"outlined\" inputType='text' />\n\t\t\t\t\t\t<div className=\"modal-spacer\">&nbsp;</div>\n\t\t\t\t\t\t<WInput className=\"modal-input\" onBlur={updateInput} name='password' labelAnimation=\"up\" barAnimation=\"solid\" labelText=\"Password\" wType=\"outlined\" inputType='password' />\n\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshowErr ? <div className='modal-error'>\n\t\t\t\t\t\t\t\t{errorMsg}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t: <div className='modal-error'>&nbsp;</div>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t</div>\n\t\t\t}\n\t\t\t<div>\n\t\t\t\t<WButton className=\"modal-button\" onClick={handleLogin} span clickAnimation=\"ripple-light\" hoverAnimation=\"darken\" shape=\"rounded\" color=\"primary\">\n\t\t\t\t\tLogin\n\t\t\t\t</WButton>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Login;","import React from 'react';\n\nimport { WModal, WMHeader, WMMain, WButton } from 'wt-frontend';\n\nconst Delete = (props) => {\n\n    const handleDelete = async () => {\n        props.deleteList(props.activeid);\n        props.setShowDelete(false);\n    }\n\n    return (\n        <div className=\"delete-modal\">\n            <div className=\"modal-header\" onClose={() => props.setShowDelete(false)}>\n                Delete List?\n\t\t\t</div>\n\n            <div>\n                <WButton className=\"modal-button cancel-button\" onClick={() => props.setShowDelete(false)} wType=\"texted\">\n                    Cancel\n\t\t\t\t</WButton>\n                <label className=\"col-spacer\">&nbsp;</label>\n                <WButton className=\"modal-button\" onClick={handleDelete} clickAnimation=\"ripple-light\" hoverAnimation=\"darken\" shape=\"rounded\" color=\"danger\">\n                    Delete\n\t\t\t\t</WButton>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Delete;","import React, { useState } \tfrom 'react';\nimport { REGISTER }\t\t\tfrom '../../cache/mutations';\nimport { useMutation }    \tfrom '@apollo/client';\n\nimport { WModal, WMHeader, WMMain, WMFooter, WButton, WInput, WRow, WCol } from 'wt-frontend';\n\nconst CreateAccount = (props) => {\n\tconst [input, setInput] = useState({ email: '', password: '', firstName: '', lastName: '' });\n\tconst [loading, toggleLoading] = useState(false);\n\tconst [Register] = useMutation(REGISTER);\n\n\t\n\tconst updateInput = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tconst updated = { ...input, [name]: value };\n\t\tsetInput(updated);\n\t};\n\n\tconst handleCreateAccount = async (e) => {\n\t\tfor (let field in input) {\n\t\t\tif (!input[field]) {\n\t\t\t\talert('All fields must be filled out to register');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tconst { loading, error, data } = await Register({ variables: { ...input } });\n\t\tif (loading) { toggleLoading(true) };\n\t\tif (error) { return `Error: ${error.message}` };\n\t\tif (data) {\n\t\t\tconsole.log(data)\n\t\t\ttoggleLoading(false);\n\t\t\tif(data.register.email === 'already exists') {\n\t\t\t\talert('User with that email already registered');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprops.fetchUser();\n\t\t\t}\n\t\t\tprops.setShowCreate(false);\n\n\t\t};\n\t};\n\n\treturn (\n        // Replace div with WModal\n\n\t\t<div className=\"signup-modal\">\n\t\t\t<div className=\"modal-header\" onClose={() => props.setShowCreate(false)}>\n\t\t\t\tSign Up\n\t\t\t</div>\n\n\t\t\t{\n\t\t\t\tloading ? <div />\n\t\t\t\t\t: <div>\n\t\t\t\t\t\t<WRow className=\"modal-col-gap signup-modal\">\n\t\t\t\t\t\t\t<WCol size=\"6\">\n\t\t\t\t\t\t\t\t<WInput \n\t\t\t\t\t\t\t\t\tclassName=\"\" onBlur={updateInput} name=\"firstName\" labelAnimation=\"up\" \n\t\t\t\t\t\t\t\t\tbarAnimation=\"solid\" labelText=\"First Name\" wType=\"outlined\" inputType=\"text\" \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</WCol>\n\t\t\t\t\t\t\t<WCol size=\"6\">\n\t\t\t\t\t\t\t\t<WInput \n\t\t\t\t\t\t\t\t\tclassName=\"\" onBlur={updateInput} name=\"lastName\" labelAnimation=\"up\" \n\t\t\t\t\t\t\t\t\tbarAnimation=\"solid\" labelText=\"Last Name\" wType=\"outlined\" inputType=\"text\" \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</WCol>\n\t\t\t\t\t\t</WRow>\n\n\t\t\t\t\t\t<div className=\"modal-spacer\">&nbsp;</div>\n\t\t\t\t\t\t<WInput \n\t\t\t\t\t\t\tclassName=\"modal-input\" onBlur={updateInput} name=\"email\" labelAnimation=\"up\" \n\t\t\t\t\t\t\tbarAnimation=\"solid\" labelText=\"Email Address\" wType=\"outlined\" inputType=\"text\" \n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"modal-spacer\">&nbsp;</div>\n\t\t\t\t\t\t<WInput \n\t\t\t\t\t\t\tclassName=\"modal-input\" onBlur={updateInput} name=\"password\" labelAnimation=\"up\" \n\t\t\t\t\t\t\tbarAnimation=\"solid\" labelText=\"Password\" wType=\"outlined\" inputType=\"password\" \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t}\n\t\t\t<WButton className=\"modal-button\" onClick={handleCreateAccount} span clickAnimation=\"ripple-light\" hoverAnimation=\"darken\" shape=\"rounded\" color=\"primary\">\n\t\t\t\tSubmit\n\t\t\t</WButton>\n\t\t</div>\n\t);\n}\n\nexport default CreateAccount;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_DB_USER = gql`\n\tquery GetDBUser {\n\t\tgetCurrentUser {\n\t\t\t_id\n\t\t\tfirstName\n\t\t\tlastName\n\t\t\temail\n\t\t}\n\t}\n`;\n\nexport const GET_DB_TODOS = gql`\n\tquery GetDBTodos {\n\t\tgetAllTodos {\n\t\t\t_id\n\t\t\tid\n\t\t\tname\n\t\t\towner\n\t\t\titems {\n\t\t\t\t_id\n\t\t\t\tid\n\t\t\t\tdescription\n\t\t\t\tdue_date\n\t\t\t\tassigned_to\n\t\t\t\tcompleted\n\t\t\t}\n\t\t}\n\t}\n`;\n","export class jsTPS_Transaction {\n    constructor() {};\n    doTransaction() {};\n    undoTransaction () {};\n}\n/*  Handles list name changes, or any other top level details of a todolist that may be added   */\nexport class UpdateListField_Transaction extends jsTPS_Transaction {\n    constructor(_id, field, prev, update, callback) {\n        super();\n        this.prev = prev;\n        this.update = update;\n        this.field = field;\n        this._id = _id;\n        this.updateFunction = callback;\n    }\n    async doTransaction() {\n\t\tconst { data } = await this.updateFunction({ variables: { _id: this._id, field: this.field, value: this.update }});\n\t\treturn data;\n    }\n    async undoTransaction() {\n        const { data } = await this.updateFunction({ variables: { _id: this._id, field: this.field, value: this.prev }});\n\t\treturn data;\n    }\n}\n\n/*  Handles item reordering */\nexport class ReorderItems_Transaction extends jsTPS_Transaction {\n    constructor(listID, itemID, dir, callback) {\n        super();\n        this.listID = listID;\n        this.itemID = itemID;\n\t\tthis.dir = dir;\n\t\tthis.revDir = dir === 1 ? -1 : 1;\n\t\tthis.updateFunction = callback;\n\t}\n\n    async doTransaction() {\n\t\tconst { data } = await this.updateFunction({ variables: { itemId: this.itemID, _id: this.listID, direction: this.dir }});\n\t\treturn data;\n    }\n\n    async undoTransaction() {\n\t\tconst {data} = await this.updateFunction({ variables: { itemId: this.itemID, _id: this.listID, direction: this.revDir }});\n\t\treturn data;\n\n    }\n    \n}\n\nexport class EditItem_Transaction extends jsTPS_Transaction {\n\tconstructor(listID, itemID, field, prev, update, flag, callback) {\n\t\tsuper();\n\t\tthis.listID = listID;\n\t\tthis.itemID = itemID;\n\t\tthis.field = field;\n\t\tthis.prev = prev;\n\t\tthis.update = update;\n\t\tthis.flag = flag;\n\t\tthis.updateFunction = callback;\n\t}\t\n\n\tasync doTransaction() {\n\t\tconst { data } = await this.updateFunction({ \n\t\t\t\tvariables:{  itemId: this.itemID, _id: this.listID, \n\t\t\t\t\t\t\t field: this.field, value: this.update, \n\t\t\t\t\t\t\t flag: this.flag \n\t\t\t\t\t\t  }\n\t\t\t});\n\t\treturn data;\n    }\n\n    async undoTransaction() {\n\t\tconst { data } = await this.updateFunction({ \n\t\t\t\tvariables:{ itemId: this.itemID, _id: this.listID, \n\t\t\t\t\t\t\tfield: this.field, value: this.prev, \n\t\t\t\t\t\t\tflag: this.flag \n\t\t\t\t\t\t  }\n\t\t\t});\n\t\treturn data;\n\n    }\n}\n\n/*  Handles create/delete of list items */\nexport class UpdateListItems_Transaction extends jsTPS_Transaction {\n    // opcodes: 0 - delete, 1 - add \n    constructor(listID, itemID, item, opcode, addfunc, delfunc, index = -1) {\n        super();\n        this.listID = listID;\n\t\tthis.itemID = itemID;\n\t\tthis.item = item;\n        this.addFunction = addfunc;\n        this.deleteFunction = delfunc;\n        this.opcode = opcode;\n\tthis.index = index\n    }\n    async doTransaction() {\n\t\tlet data;\n        this.opcode === 0 ? { data } = await this.deleteFunction({\n\t\t\t\t\t\t\tvariables: {itemId: this.itemID, _id: this.listID}})\n\t\t\t\t\t\t  : { data } = await this.addFunction({\n\t\t\t\t\t\t\tvariables: {item: this.item, _id: this.listID, index: this.index}})  \n\t\tif(this.opcode !== 0) {\n            this.item._id = this.itemID = data.addItem;\n\t\t}\n\t\treturn data;\n    }\n    // Since delete/add are opposites, flip matching opcode\n    async undoTransaction() {\n\t\tlet data;\n        this.opcode === 1 ? { data } = await this.deleteFunction({\n\t\t\t\t\t\t\tvariables: {itemId: this.itemID, _id: this.listID}})\n                          : { data } = await this.addFunction({\n\t\t\t\t\t\t\tvariables: {item: this.item, _id: this.listID, index: this.index}})\n\t\tif(this.opcode !== 1) {\n            this.item._id = this.itemID = data.addItem;\n        }\n\t\treturn data;\n    }\n}\n\n\n\n\nexport class jsTPS {\n    constructor() {\n        // THE TRANSACTION STACK\n        this.transactions = [];\n        // KEEPS TRACK OF WHERE WE ARE IN THE STACK, THUS AFFECTING WHAT\n        // TRANSACTION MAY BE DONE OR UNDONE AT ANY GIVEN TIME\n        this.mostRecentTransaction = -1;\n        // THESE VARIABLES CAN BE TURNED ON AND OFF TO SIGNAL THAT\n        // DO AND UNDO OPERATIONS ARE BEING PERFORMED\n        this.performingDo = false;\n        this.performingUndo = false;\n    }\n    \n    /**\n     * Tests to see if the do (i.e. redo) operation is currently being\n     * performed. If it is, true is returned, if not, false.\n     * \n     * return true if the do (i.e. redo) operation is currently in the\n     * process of executing, false otherwise.\n     */\n    isPerformingDo() {\n        return this.performingDo;\n    }\n    \n    /**\n     * Tests to see if the undo operation is currently being\n     * performed. If it is, true is returned, if not, false.\n     * \n     * return true if the undo operation is currently in the\n     * process of executing, false otherwise.\n     */\n    isPerformingUndo() {\n        return this.performingUndo;\n    }\n    \n    /**\n     * This function adds the transaction argument to the top of\n     * the transaction processing system stack and then executes it. Note that it does\n     * When this method has completed transaction will be at the top \n     * of the stack, it will have been completed, and the counter have\n     * been moved accordingly.\n     * \n     * param transaction The custom transaction to be added to\n     * the transaction processing system stack and executed.\n     */\n    addTransaction(transaction) {\n        // ARE THERE OLD UNDONE TRANSACTIONS ON THE STACK THAT FIRST\n        // NEED TO BE CLEARED OUT, i.e. ARE WE BRANCHING?\n        if ((this.mostRecentTransaction < 0)|| (this.mostRecentTransaction < (this.transactions.length-1))) {\n            for (let i = this.transactions.length-1; i > this.mostRecentTransaction; i--) {\n                this.transactions.splice(i, 1);\n            }\n        }\n\n        // AND NOW ADD THE TRANSACTION\n        this.transactions.push(transaction);\n        // AND EXECUTE IT\n        // this.doTransaction();        \n    }\n\n    /**\n     * This function executes the transaction at the location of the counter,\n     * then moving the TPS counter. Note that this may be the transaction\n     * at the top of the TPS stack or somewhere in the middle (i.e. a redo).\n     */\n     async doTransaction() {\n\t\tlet retVal;\n        if (this.hasTransactionToRedo()) {   \n            this.performingDo = true;\n            let transaction = this.transactions[this.mostRecentTransaction+1];\n\t\t\tretVal = await transaction.doTransaction();\n\t\t\tthis.mostRecentTransaction++;\n\t\t\tthis.performingDo = false;\n            \n        }\n        console.log('transactions: ' + this.getSize());\n        console.log('redo transactions:' + this.getRedoSize());\n        console.log('undo transactions:' + this.getUndoSize());\n\t\tconsole.log(' ')\n\t\treturn retVal;\n    }\n    \n    /**\n     * This function checks to see if there is a transaction to undo. If there\n     * is it will return it, if not, it will return null.\n     * \n     * return The transaction that would be executed if undo is performed, if\n     * there is no transaction to undo, null is returned.\n     */\n    peekUndo() {\n        if (this.hasTransactionToUndo()) {\n            return this.transactions[this.mostRecentTransaction];\n        }\n        else\n            return null;\n    }\n    \n    /**\n     * This function checks to see if there is a transaction to redo. If there\n     * is it will return it, if not, it will return null.\n     * \n     * return The transaction that would be executed if redo is performed, if\n     * there is no transaction to undo, null is returned.\n     */    \n    peekDo() {\n        if (this.hasTransactionToRedo()) {\n            return this.transactions[this.mostRecentTransaction+1];\n        }\n        else\n            return null;\n    }\n\n    /**\n     * This function gets the most recently executed transaction on the \n     * TPS stack and undoes it, moving the TPS counter accordingly.\n     */\n     async undoTransaction() {\n\t\tlet retVal;\n        if (this.hasTransactionToUndo()) {\n            this.performingUndo = true;\n            let transaction = this.transactions[this.mostRecentTransaction];\n\t\t\tretVal = await transaction.undoTransaction();\n            this.mostRecentTransaction--;\n\t\t\tthis.performingUndo = false;\n        }\n        console.log('transactions: ' + this.getSize());\n        console.log('redo transactions:' + this.getRedoSize());\n        console.log('undo transactions:' + this.getUndoSize());\n        console.log(' ')\n\t\treturn(retVal);\n    }\n\n    /**\n     * This method clears all transactions from the TPS stack\n     * and resets the counter that keeps track of the location\n     * of the top of the stack.\n     */\n    clearAllTransactions() {\n        // REMOVE ALL THE TRANSACTIONS\n        this.transactions = [];\n        \n        // MAKE SURE TO RESET THE LOCATION OF THE\n        // TOP OF THE TPS STACK TOO\n        this.mostRecentTransaction = -1;        \n    }\n    \n    /**\n     * Accessor method that returns the number of transactions currently\n     * on the transaction stack. This includes those that may have been\n     * done, undone, and redone.\n     * \n     * return The number of transactions currently in the transaction stack.\n     */\n    getSize() {\n        return this.transactions.length;\n    }\n    \n    /**\n     * This method returns the number of transactions currently in the\n     * transaction stack that can be redone, meaning they have been added\n     * and done, and then undone.\n     * \n     * return The number of transactions in the stack that can be redone.\n     */\n    getRedoSize() {\n        return this.getSize() - this.mostRecentTransaction - 1;\n    }\n\n    /**\n     * This method returns the number of transactions currently in the \n     * transaction stack that can be undone.\n     * \n     * return The number of transactions in the transaction stack that\n     * can be undone.\n     */\n    getUndoSize() {\n        return this.mostRecentTransaction + 1;\n    }\n    \n    /**\n     * This method tests to see if there is a transaction on the stack that\n     * can be undone at the time this function is called.\n     * \n     * return true if an undo operation is possible, false otherwise.\n     */\n    hasTransactionToUndo() {\n        return this.mostRecentTransaction >= 0;\n    }\n    \n    /**\n     * This method tests to see if there is a transaction on the stack that\n     * can be redone at the time this function is called.\n     * \n     * return true if a redo operation is possible, false otherwise.\n     */\n    hasTransactionToRedo() {\n        return this.mostRecentTransaction < (this.transactions.length-1);\n    }\n        \n    /**\n     * This method builds and returns a textual summary of the current\n     * Transaction Processing System, this includes the toString of\n     * each transaction in the stack.\n     * \n     * return A textual summary of the TPS.\n     */\n    // toString() {\n    //     let text = \"<br>\" +\"--Number of Transactions: \" + this.transactions.length + \"</br>\";\n    //     text += \"<br>\" + \"--Current Index on Stack: \" + this.mostRecentTransaction + \"</br>\";\n    //     text += \"<br>\" + \"--Current Transaction Stack:\" + \"</br>\";\n    //     for (let i = 0; i <= this.mostRecentTransaction; i++) {\n    //         let jsT = this.transactions[i];\n    //         text += \"<br>\" + \"----\" + jsT.toString() + \"</br>\";\n    //     }\n    //     return text;\n    // }\n}\n","import React, { useState, useEffect } \tfrom 'react';\nimport Logo \t\t\t\t\t\t\tfrom '../navbar/Logo';\nimport NavbarOptions \t\t\t\t\tfrom '../navbar/NavbarOptions';\nimport MainContents \t\t\t\t\tfrom '../main/MainContents';\nimport SidebarContents \t\t\t\t\tfrom '../sidebar/SidebarContents';\nimport Login \t\t\t\t\t\t\tfrom '../modals/Login';\nimport Delete \t\t\t\t\t\t\tfrom '../modals/Delete';\nimport CreateAccount \t\t\t\t\tfrom '../modals/CreateAccount';\nimport { GET_DB_TODOS } \t\t\t\tfrom '../../cache/queries';\nimport * as mutations \t\t\t\t\tfrom '../../cache/mutations';\nimport { useMutation, useQuery } \t\tfrom '@apollo/client';\nimport { WNavbar, WSidebar, WNavItem } \tfrom 'wt-frontend';\nimport { WLayout, WLHeader, WLMain, WLSide } from 'wt-frontend';\nimport { UpdateListField_Transaction, \n\tUpdateListItems_Transaction, \n\tReorderItems_Transaction, \n\tEditItem_Transaction } \t\t\t\tfrom '../../utils/jsTPS';\nimport WInput from 'wt-frontend/build/components/winput/WInput';\n\n\nconst Homescreen = (props) => {\n\n\tlet todolists \t\t\t\t\t\t\t= [];\n\tconst [activeList, setActiveList] \t\t= useState({});\n\tconst [showDelete, toggleShowDelete] \t= useState(false);\n\tconst [showLogin, toggleShowLogin] \t\t= useState(false);\n\tconst [showCreate, toggleShowCreate] \t= useState(false);\n\n\tconst [ReorderTodoItems] \t\t= useMutation(mutations.REORDER_ITEMS);\n\tconst [UpdateTodoItemField] \t= useMutation(mutations.UPDATE_ITEM_FIELD);\n\tconst [UpdateTodolistField] \t= useMutation(mutations.UPDATE_TODOLIST_FIELD);\n\tconst [DeleteTodolist] \t\t\t= useMutation(mutations.DELETE_TODOLIST);\n\tconst [DeleteTodoItem] \t\t\t= useMutation(mutations.DELETE_ITEM);\n\tconst [AddTodolist] \t\t\t= useMutation(mutations.ADD_TODOLIST);\n\tconst [AddTodoItem] \t\t\t= useMutation(mutations.ADD_ITEM);\n\n\n\tconst { loading, error, data, refetch } = useQuery(GET_DB_TODOS);\n\tif(loading) { console.log(loading, 'loading'); }\n\tif(error) { console.log(error, 'error'); }\n\tif(data) { todolists = data.getAllTodos; }\n\tconsole.log(todolists)\n\n\tconst auth = props.user === null ? false : true;\n\n\tconst refetchTodos = async (refetch) => {\n\t\tconst { loading, error, data } = await refetch();\n\t\tif (data) {\n\t\t\ttodolists = data.getAllTodos;\n\t\t\tif (activeList._id) {\n\t\t\t\tlet tempID = activeList._id;\n\t\t\t\tlet list = todolists.find(list => list._id === tempID);\n\t\t\t\tsetActiveList(list);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst tpsUndo = async () => {\n\t\tconst retVal = await props.tps.undoTransaction();\n\t\trefetchTodos(refetch);\n\t\treturn retVal;\n\t}\n\n\tconst tpsRedo = async () => {\n\t\tconst retVal = await props.tps.doTransaction();\n\t\trefetchTodos(refetch);\n\t\treturn retVal;\n\t}\n\n\n\t// Creates a default item and passes it to the backend resolver.\n\t// The return id is assigned to the item, and the item is appended\n\t//  to the local cache copy of the active todolist. \n\tconst addItem = async () => {\n\t\tlet list = activeList;\n\t\tconst items = list.items;\n\t\tconst lastID = items.length >= 1 ? items[items.length - 1].id + 1 : 0;\n\t\tconst newItem = {\n\t\t\t_id: '',\n\t\t\tid: lastID,\n\t\t\tdescription: 'No Description',\n\t\t\tdue_date: 'No Date',\n\t\t\tassigned_to: props.user._id,\n\t\t\tcompleted: false\n\t\t};\n\t\tlet opcode = 1;\n\t\tlet itemID = newItem._id;\n\t\tlet listID = activeList._id;\n\t\tlet transaction = new UpdateListItems_Transaction(listID, itemID, newItem, opcode, AddTodoItem, DeleteTodoItem);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\t};\n\n\n\tconst deleteItem = async (item, index) => {\n\t\tlet listID = activeList._id;\n\t\tlet itemID = item._id;\n\t\tlet opcode = 0;\n\t\tlet itemToDelete = {\n\t\t\t_id: item._id,\n\t\t\tid: item.id,\n\t\t\tdescription: item.description,\n\t\t\tdue_date: item.due_date,\n\t\t\tassigned_to: item.assigned_to,\n\t\t\tcompleted: item.completed\n\t\t}\n\t\tlet transaction = new UpdateListItems_Transaction(listID, itemID, itemToDelete, opcode, AddTodoItem, DeleteTodoItem, index);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\t};\n\n\tconst editItem = async (itemID, field, value, prev) => {\n\t\tlet flag = 0;\n\t\tif (field === 'completed') flag = 1;\n\t\tlet listID = activeList._id;\n\t\tlet transaction = new EditItem_Transaction(listID, itemID, field, prev, value, flag, UpdateTodoItemField);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\n\t};\n\n\tconst reorderItem = async (itemID, dir) => {\n\t\tlet listID = activeList._id;\n\t\tlet transaction = new ReorderItems_Transaction(listID, itemID, dir, ReorderTodoItems);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\n\t};\n\n\tconst createNewList = async () => {\n\t\tconst length = todolists.length\n\t\tconst id = length >= 1 ? todolists[length - 1].id + Math.floor((Math.random() * 100) + 1) : 1;\n\t\tlet list = {\n\t\t\t_id: '',\n\t\t\tid: id,\n\t\t\tname: 'Untitled',\n\t\t\towner: props.user._id,\n\t\t\titems: [],\n\t\t}\n\t\tconst { data } = await AddTodolist({ variables: { todolist: list }, refetchQueries: [{ query: GET_DB_TODOS }] });\n\t\tawait refetchTodos(refetch);\n\t\tif(data) {\n\t\t\tlet _id = data.addTodolist;\n\t\t\thandleSetActive(_id);\n\t\t}\n\t};\n\n\tconst deleteList = async (_id) => {\n\t\tDeleteTodolist({ variables: { _id: _id }, refetchQueries: [{ query: GET_DB_TODOS }] });\n\t\trefetch();\n\t\tsetActiveList({});\n\t};\n\n\tconst updateListField = async (_id, field, value, prev) => {\n\t\tlet transaction = new UpdateListField_Transaction(_id, field, prev, value, UpdateTodolistField);\n\t\tprops.tps.addTransaction(transaction);\n\t\ttpsRedo();\n\n\t};\n\n\tconst handleSetActive = (id) => {\n\t\tconst todo = todolists.find(todo => todo.id === id || todo._id === id);\n\t\tsetActiveList(todo);\n\t};\n\n\t\n\t/*\n\t\tSince we only have 3 modals, this sort of hardcoding isnt an issue, if there\n\t\twere more it would probably make sense to make a general modal component, and\n\t\ta modal manager that handles which to show.\n\t*/\n\tconst setShowLogin = () => {\n\t\ttoggleShowDelete(false);\n\t\ttoggleShowCreate(false);\n\t\ttoggleShowLogin(!showLogin);\n\t};\n\n\tconst setShowCreate = () => {\n\t\ttoggleShowDelete(false);\n\t\ttoggleShowLogin(false);\n\t\ttoggleShowCreate(!showCreate);\n\t};\n\n\tconst setShowDelete = () => {\n\t\ttoggleShowCreate(false);\n\t\ttoggleShowLogin(false);\n\t\ttoggleShowDelete(!showDelete)\n\t}\n\n\treturn (\n\t\t<WLayout wLayout=\"header-lside\">\n\t\t\t<WLHeader>\n\t\t\t\t<WNavbar color=\"colored\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<WNavItem>\n\t\t\t\t\t\t\t<Logo className='logo' />\n\t\t\t\t\t\t</WNavItem>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<NavbarOptions\n\t\t\t\t\t\t\tfetchUser={props.fetchUser} auth={auth} \n\t\t\t\t\t\t\tsetShowCreate={setShowCreate} setShowLogin={setShowLogin}\n\t\t\t\t\t\t\trefetchTodos={refetch} setActiveList={setActiveList}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ul>\n\t\t\t\t</WNavbar>\n\t\t\t</WLHeader>\n\n\t\t\t<WLSide side=\"left\">\n\t\t\t\t<WSidebar>\n\t\t\t\t\t{\n\t\t\t\t\t\tactiveList ?\n\t\t\t\t\t\t\t<SidebarContents\n\t\t\t\t\t\t\t\ttodolists={todolists} activeid={activeList.id} auth={auth}\n\t\t\t\t\t\t\t\thandleSetActive={handleSetActive} createNewList={createNewList}\n\t\t\t\t\t\t\t\tundo={tpsUndo} redo={tpsRedo}\n\t\t\t\t\t\t\t\tupdateListField={updateListField}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t}\n\t\t\t\t</WSidebar>\n\t\t\t</WLSide>\n\t\t\t<WLMain>\n\t\t\t\t{\n\t\t\t\t\tactiveList ? \n\t\t\t\t\t\t\t<div className=\"container-secondary\">\n\t\t\t\t\t\t\t\t<MainContents\n\t\t\t\t\t\t\t\t\taddItem={addItem} deleteItem={deleteItem}\n\t\t\t\t\t\t\t\t\teditItem={editItem} reorderItem={reorderItem}\n\t\t\t\t\t\t\t\t\tsetShowDelete={setShowDelete}\n\t\t\t\t\t\t\t\t\tactiveList={activeList} setActiveList={setActiveList}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<div className=\"container-secondary\" />\n\t\t\t\t}\n\n\t\t\t</WLMain>\n\n\t\t\t{\n\t\t\t\tshowDelete && (<Delete deleteList={deleteList} activeid={activeList._id} setShowDelete={setShowDelete} />)\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tshowCreate && (<CreateAccount fetchUser={props.fetchUser} setShowCreate={setShowCreate} />)\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tshowLogin && (<Login fetchUser={props.fetchUser} refetchTodos={refetch}setShowLogin={setShowLogin} />)\n\t\t\t}\n\n\t\t</WLayout>\n\t);\n};\n\nexport default Homescreen;\n","import React \t\t\tfrom 'react';\nimport Homescreen \t\tfrom './components/homescreen/Homescreen';\nimport { useQuery } \tfrom '@apollo/client';\nimport * as queries \tfrom './cache/queries';\nimport { jsTPS } \t\tfrom './utils/jsTPS';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n \nconst App = () => {\n\tlet user = null;\n    let transactionStack = new jsTPS();\n\t\n    const { loading, error, data, refetch } = useQuery(queries.GET_DB_USER);\n\n    if(error) { console.log(error); }\n\tif(loading) { console.log(loading); }\n\tif(data) { \n\t\tlet { getCurrentUser } = data;\n\t\tif(getCurrentUser !== null) { user = getCurrentUser; }\n    }\n\n\treturn(\n\t\t<BrowserRouter>\n\t\t\t<Switch>\n\t\t\t\t<Redirect exact from=\"/\" to={ {pathname: \"/home\"} } />\n\t\t\t\t<Route \n\t\t\t\t\tpath=\"/home\" \n\t\t\t\t\tname=\"home\" \n\t\t\t\t\trender={() => \n\t\t\t\t\t\t<Homescreen tps={transactionStack} fetchUser={refetch} user={user} />\n\t\t\t\t\t} \n\t\t\t\t/>\n\t\t\t\t<Route/>\n\t\t\t</Switch>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;","import './css/style.scss';\nimport './css/layout.scss';\nimport React \tfrom 'react';\nimport ReactDOM from 'react-dom';\nimport App \t\tfrom './App';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nconst cache = new InMemoryCache({\n\n\t/*\n\t\tThe cache object ids are generated using the objectID(a string) instead\n\t\tof the number id so that objects are refered to consistently across the\n\t\tclient and server\n\t*/\n\tdataIdFromObject: object => `${object.__typename}:${object._id}`,\n\ttypePolicies: {\n\t\tQuery: {\n\t\t\tfields: {\n\t\t\t\tgetAllEntries: {\n\t\t\t\t\tmerge(existing, incoming){\n\t\t\t\t\t\treturn incoming\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n});\n\n// rebuild\n// bad hardcoding, localhost port should match port in the backend's .env file\n//const BACKEND_LOCATION = 'http://localhost:4000/graphql';\nconst BACKEND_LOCATION = '/graphql';\n\nconst client = new ApolloClient({\n\turi: BACKEND_LOCATION,\n\t// Credentials: include is necessary to pass along the auth cookies with each server request\n\tcredentials: 'same-origin',\n\tcache: cache,\n});\n\n\n\n\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ApolloProvider client={client}>\n\t    \t<App />\n\t\t</ApolloProvider>\n  \t</React.StrictMode>,\n  \tdocument.getElementById('root')\n);"],"sourceRoot":""}