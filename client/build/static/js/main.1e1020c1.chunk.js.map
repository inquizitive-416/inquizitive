{"version":3,"sources":["components/navbar/Navbar_.js","components/explorescreen/Explorescreen.js","App.js","index.js"],"names":["LoggedOut","props","Navbar","bg","variant","Brand","href","style","color","Nav","className","Link","Navbar_","Explorescreen","App","exact","from","to","pathname","path","name","render","cache","InMemoryCache","dataIdFromObject","object","__typename","_id","typePolicies","Query","fields","getAllEntries","merge","existing","incoming","client","ApolloClient","uri","credentials","ReactDOM","StrictMode","document","getElementById"],"mappings":"2MAGMA,EAAY,SAACC,GACf,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QAC9B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,KAA6B,0BAAMC,MAAO,CAACC,MAAO,YAArB,QAA7B,SACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUL,KAAK,YAAf,WACA,kBAACG,EAAA,EAAIE,KAAL,CAAUL,KAAK,WAAf,UACA,kBAACG,EAAA,EAAIE,KAAL,CAAUL,KAAK,gBAAf,eACA,kBAACG,EAAA,EAAIE,KAAL,CAAUL,KAAK,SAAf,SAEJ,kBAACG,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIE,KAAL,CAAUL,KAAK,SAAf,YACA,kBAACG,EAAA,EAAIE,KAAL,CAAUL,KAAK,aAAf,YACA,kBAACG,EAAA,EAAIE,KAAL,CAAUL,KAAK,YAAf,cAYOM,EANC,SAACX,GACb,OACI,kBAAC,EAAD,OCdOY,EAPO,SAACZ,GAEtB,OACC,kBAAC,EAAD,O,gBCiBaa,EAnBH,WAEX,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAK,CAACC,SAAU,cACzC,kBAAC,IAAD,CACCC,KAAK,WACLC,KAAK,UACLC,OAAQ,kBACP,kBAAC,EAAD,SAGF,kBAAC,IAAD,S,QCZEC,EAAQ,IAAIC,gBAAc,CAO/BC,iBAAkB,SAAAC,GAAM,gBAAOA,EAAOC,WAAd,YAA4BD,EAAOE,MAC3DC,aAAc,CACbC,MAAO,CACNC,OAAQ,CACPC,cAAe,CACdC,MADc,SACRC,EAAUC,GACf,OAAOA,SAaPC,EAAS,IAAIC,eAAa,CAC/BC,IAHwB,WAKxBC,YAAa,cACbhB,MAAOA,IAORiB,IAASlB,OACR,kBAAC,IAAMmB,WAAP,KACC,kBAAC,iBAAD,CAAgBL,OAAQA,GACpB,kBAAC,EAAD,QAGHM,SAASC,eAAe,W","file":"static/js/main.1e1020c1.chunk.js","sourcesContent":["import React                                from 'react';\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap'\r\n\r\nconst LoggedOut = (props) => {\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"/home\">In<span style={{color: '#f5ae31'}}>Quiz</span>Itive</Navbar.Brand>\r\n    <Nav className=\"mr-auto\">\r\n        <Nav.Link href=\"/explore\">Explore</Nav.Link>\r\n        <Nav.Link href=\"/create\">Create</Nav.Link>\r\n        <Nav.Link href=\"/tournaments\">Tournaments</Nav.Link>\r\n        <Nav.Link href=\"/shop\">Shop</Nav.Link>\r\n    </Nav>\r\n    <Nav>\r\n        <Nav.Link href=\"/shop\">Currency</Nav.Link>\r\n        <Nav.Link href=\"/settings\">Settings</Nav.Link>\r\n        <Nav.Link href=\"/profile\">Profile</Nav.Link>\r\n    </Nav>\r\n  </Navbar>\r\n    );\r\n};\r\n\r\nconst Navbar_ = (props) => {\r\n    return (\r\n        <LoggedOut/>\r\n    );\r\n};\r\n\r\nexport default Navbar_;","import React, { useState, useEffect } \tfrom 'react';\r\nimport Navbar_ \t\t\t\t\tfrom '../navbar/Navbar_';\r\n\r\nconst Explorescreen = (props) => {\r\n\r\n\treturn (\r\n\t\t<Navbar_/>\r\n\t);\r\n};\r\n\r\nexport default Explorescreen;\r\n","import React \t\t\tfrom 'react';\r\nimport Explorescreen \t\tfrom './components/explorescreen/Explorescreen';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\n \r\nconst App = () => {\r\n\r\n\treturn(\r\n\t\t<BrowserRouter>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Redirect exact from=\"/\" to={ {pathname: \"/explore\"} } />\r\n\t\t\t\t<Route \r\n\t\t\t\t\tpath=\"/explore\" \r\n\t\t\t\t\tname=\"explore\" \r\n\t\t\t\t\trender={() => \r\n\t\t\t\t\t\t<Explorescreen/>\r\n\t\t\t\t\t} \r\n\t\t\t\t/>\r\n\t\t\t\t<Route/>\r\n\t\t\t</Switch>\r\n\t\t</BrowserRouter>\r\n\t);\r\n}\r\n\r\nexport default App;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React \tfrom 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App \t\tfrom './App';\r\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\r\nconst cache = new InMemoryCache({\r\n\r\n\t/*\r\n\t\tThe cache object ids are generated using the objectID(a string) instead\r\n\t\tof the number id so that objects are refered to consistently across the\r\n\t\tclient and server\r\n\t*/\r\n\tdataIdFromObject: object => `${object.__typename}:${object._id}`,\r\n\ttypePolicies: {\r\n\t\tQuery: {\r\n\t\t\tfields: {\r\n\t\t\t\tgetAllEntries: {\r\n\t\t\t\t\tmerge(existing, incoming){\r\n\t\t\t\t\t\treturn incoming\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n});\r\n\r\n// rebuild\r\n// bad hardcoding, localhost port should match port in the backend's .env file\r\n//const BACKEND_LOCATION = 'http://localhost:4000/graphql';\r\nconst BACKEND_LOCATION = '/graphql';\r\n\r\nconst client = new ApolloClient({\r\n\turi: BACKEND_LOCATION,\r\n\t// Credentials: include is necessary to pass along the auth cookies with each server request\r\n\tcredentials: 'same-origin',\r\n\tcache: cache,\r\n});\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<ApolloProvider client={client}>\r\n\t    \t<App />\r\n\t\t</ApolloProvider>\r\n  \t</React.StrictMode>,\r\n  \tdocument.getElementById('root')\r\n);"],"sourceRoot":""}